import { prepare } from "../deps.ts";
const DenoCore = Deno.core;
const PLUGIN_NAME = "deno_mongo";
let mongoPluginId;
const decoder = new TextDecoder();
const encoder = new TextEncoder();
const pendingCommands = new Map();
let nextCommandId = 0;
export async function init(releaseUrl) {
    const options = {
        name: PLUGIN_NAME,
        urls: {
            darwin: `${releaseUrl}/lib${PLUGIN_NAME}.dylib`,
            windows: `${releaseUrl}/${PLUGIN_NAME}.dll`,
            linux: `${releaseUrl}/lib${PLUGIN_NAME}.so`,
        },
    };
    await prepare(options);
    mongoPluginId = DenoCore.ops()["mongo_command"];
    DenoCore.setAsyncHandler(mongoPluginId, (msg) => {
        const { command_id, data, error } = JSON.parse(decoder.decode(msg));
        const command = pendingCommands.get(command_id);
        if (command) {
            if (error)
                command.reject(new Error(error));
            else
                command.resolve(data);
        }
    });
}
export function encode(str) {
    return encoder.encode(str);
}
export function decode(data) {
    return decoder.decode(data);
}
export function dispatch(command, ...data) {
    const control = encoder.encode(JSON.stringify(command));
    if (!mongoPluginId) {
        throw new Error("The plugin must be initialized before use");
    }
    const msg = DenoCore.dispatch(mongoPluginId, control, ...data);
    const { data: res, error } = JSON.parse(decoder.decode(msg));
    if (error)
        throw new Error(error);
    return res;
}
export function dispatchAsync(command, ...data) {
    return new Promise((resolve, reject) => {
        const commandId = nextCommandId++;
        pendingCommands.set(commandId, { resolve, reject });
        const control = encoder.encode(JSON.stringify({
            ...command,
            command_id: commandId,
        }));
        if (!mongoPluginId) {
            throw new Error("The plugin must be initialized before use");
        }
        DenoCore.dispatch(mongoPluginId, control, ...data);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUlyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFRckIsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQztBQUVqQyxJQUFJLGFBQXFCLENBQUM7QUFFMUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sZUFBZSxHQUdqQixJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRWQsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBUXRCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLFVBQWtCO0lBQzNDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsSUFBSSxFQUFFLFdBQVc7UUFDakIsSUFBSSxFQUFFO1lBQ0osTUFBTSxFQUFFLEdBQUcsVUFBVSxPQUFPLFdBQVcsUUFBUTtZQUMvQyxPQUFPLEVBQUUsR0FBRyxVQUFVLElBQUksV0FBVyxNQUFNO1lBQzNDLEtBQUssRUFBRSxHQUFHLFVBQVUsT0FBTyxXQUFXLEtBQUs7U0FDNUM7S0FDRixDQUFDO0lBRUYsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsYUFBYSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVoRCxRQUFRLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQzFELE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLEtBQUs7Z0JBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztnQkFDdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBVztJQUNoQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsSUFBZ0I7SUFDckMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUN0QixPQUFnQixFQUNoQixHQUFHLElBQXVCO0lBRTFCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0tBQzlEO0lBQ0QsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFFLENBQUM7SUFDaEUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0QsSUFBSSxLQUFLO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixPQUFnQixFQUNoQixHQUFHLElBQXVCO0lBRTFCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsTUFBTSxTQUFTLEdBQUcsYUFBYSxFQUFFLENBQUM7UUFDbEMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNwRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsR0FBRyxPQUFPO1lBQ1YsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUNILENBQUM7UUFDRixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUM5RDtRQUNELFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9